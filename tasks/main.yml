---
- include: symlinks-present.yml
  tags:
    - deploy.init

- name: Remove current build symlink and its contents, if any
  file:
    path: "{{ webroot }}/{{ app_name }}/public_html.build"
    state: absent
    follow: yes
  become: yes
  tags:
    - deploy.init
 
- include: drush-checks.yml
  tags:
    - deploy.init

- name: Create Drush aliases (current, build and source)
  template:
    src: drush/aliases.drushrc.php.j2
    dest: /home/{{ app_env['user'] }}/.drush/{{ app_name }}.aliases.drushrc.php
    owner: "{{ app_env['user'] }}"
    group: "{{ app_env['group'] }}"
  become: yes

#
# Codebase tasks
#
- name: Make sure codebase dir exists
  file:
    path: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
    state: directory
    owner: "{{ app_env['user'] }}"
    group: "{{ app_env['group'] }}"
  become: yes

- include: download-install-profile.yml
  when: deploy_install_profile_enabled|default(False)|bool and deploy_d_o_install_profile != ''
  vars:
    codebase_basepath: "{{ webroot }}/{{ app_name }}"
    project_name: "public_html.{{ build }}"
    codebase_dir: "{{ codebase_basepath }}/{{ project_name }}"
    profiles_dir: "/home/{{ app_env['user'] }}/{{ app_name }}/profiles"
    install_profile: "{{ deploy_d_o_install_profile }}"
  tags:
    - deploy.app.codebase

- include: deploy-codebase.yml
  when: not deploy_install_profile_enabled|default(False)|bool or (deploy_install_profile_enabled|default(False)|bool and deploy_custom_install_profile != '')
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
    cached_copy_dir: "/home/{{ app_env['user'] }}/{{ app_name }}/cached-copy"
  tags:
    - deploy.app.codebase

- include: unarchive-codebase.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  when: codebase_import|default(False)|bool
  tags:
    - deploy.app.codebase

- include: drush-make.yml
  when: deploy_drush_make_enabled|default(False)|bool
  vars:
    profiles_dir: "/home/{{ app_env['user'] }}/{{ app_name }}/profiles"
    install_profile: "{{ deploy_d_o_install_profile }}"
  tags:
    - deploy.app.codebase

- include: deploy-final.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  tags:
    - deploy.app.codebase

- include: drupal-settings.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  tags:
    - deploy.drupal.settings

#
# Database tasks
#
- include: backup-cur-db.yml
  when: app_env.do_cur_backup|default(True)|bool and (app_env.db_clone|default(False)|bool or app_env.db_import|default(False)|bool or app_env.db_sync|default(False)|bool)
  tags:
    - deploy.provision.database

- include: readonly-mode.yml
  vars:
    readonly_flag: 1
  when: app_env.db_clone|default(False)|bool and not app_env.db_import|default(False)|bool
  tags:
    - deploy.provision.database

- include: site-offline.yml
  vars:
    offline_flag: 1
  when: not app_env.db_clone|default(False)|bool and not app_env.db_import|default(False)|bool
  tags:
    - deploy.provision.database

#
# For when setting up a profile/distribution
#
- include: deploy-site-install.yml
  when: app_env['site_install']|default(False)|bool
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
    locale: "{{ app_locale|default('en') }}"
    name: "{{ app_name }}"
    email: "{{ app_env['admin_email'] }}"
    site_pass: "{{ drupal_admin_password }}" 
    install_profile: "{{ deploy_install_profile }}"
  tags:
    - deploy.provision.si

- include: clone-db.yml
  when: app_env.db_clone|default(False)|bool
  tags:
    - deploy.provision.database

- include: import-db.yml
  when: app_env.db_import|default(False)|bool
  tags:
    - deploy.provision.database

- include: sync-db-from-source.yml
  when: app_drush_source is defined and deploy_target != 'prod' and app_env.db_sync|default(False)|bool
  tags:
    - deploy.provision.database

#
# Drupal DB tasks
#
- include: registry-rebuild.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  tags:
    - deploy.config.database

- include: enable-memcached.yml
  when: app_env.memcached|default(True)|bool and drupal_version == '7'
  tags:
    - deploy.config.database

- include: enable-varnish.yml
  when: deploy_varnish_enabled|default(True)|bool and varnish_drupal_module == 'varnish' and drupal_version == '7'
  tags:
    - deploy.config.database

- include: enable-securepages.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  when: app_env.https_enabled|default(False)|bool and app_env.https_enabled|bool and drupal_version == '7'
  tags:
    - deploy.config.database
  
- include: enable-disable-modules.yml
  tags:
    - deploy.config.database

- include: adjust-db.yml
  when: app_env.adjust_db|default(True)|bool
  tags:
    - deploy.config.database

- include: reset-admin-pass.yml
  when: deploy_target != 'prod'
  tags:
    - deploy.config.database

- include: readonly-mode.yml
  vars:
    readonly_flag: 0
  when: app_env.db_clone|default(False)|bool and not app_env.db_import|default(False)|bool
  tags:
    - deploy.config.database

- include: site-offline.yml
  vars:
    offline_flag: 0
  when: not app_env.db_clone|default(False)|bool and not app_env.db_import|default(False)|bool
  tags:
    - deploy.config.database

#
# Drupal files tasks
#
# Archive in the top folder of the project.
# Supports tar, gzip, bzip2, and xz.
# It must not be a tarbomb: it must unpack to a folder called "files".
# If it does not exist in the local project folder, it will be looked up in the remote host
# Defaults to {{ app_name }}-files.tar.gz  
- include: unarchive-files.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  when: app_env.files_import|default(False)|bool
  tags:
    - deploy.provision.files

- include: copy-files.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  when: app_env.files_copy|default(False)|bool
  tags:
    - deploy.provision.files

- include: sync-files-from-source.yml
  when: app_env.files_sync|default(False)|bool and app_drush_source is defined and deploy_target != 'prod'
  tags:
    - deploy.provision.files

- include: adjust-files-perms.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  tags:
    - deploy.provision.files

- include: copy-translations.yml
  when: app_i18n|default(False)|bool
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  tags:
    - deploy.provision.translation.files

#
# Final tasks
#
- include: cc-all.yml
  tags:
    - deploy.final

- include: flush-image.yml
  tags:
    - deploy.final

- include: branch-tag.yml
  vars:
    codebase_dir: "{{ webroot }}/{{ app_name }}/public_html.{{ build }}"
  when: deploy_target == 'prod' and not deploy_site_install|bool and not codebase_import|default(False)|bool
  tags:
    - deploy.final

- include: switch-on.yml
  tags:
    - deploy.final

- include: cron.yml
  tags:
    - deploy.cron

- include: rsyslog.yml
  when: app_env.syslog|default(False)|bool
  tags:
    - deploy.rsyslog
  become: yes

- include: logrotate.yml
  when: app_env['deploy_backup_enabled']|default(False)|bool
  tags:
    - deploy.logrotate

- name: Restart php5-fpm
  service: 
    name: php5-fpm 
    state: restarted
  become: yes
