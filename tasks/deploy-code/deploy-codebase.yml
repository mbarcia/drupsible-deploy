---
- name: Make sure directory exists for the codebase dir inside the web root
  file:
    path: "{{ codebase_dir }}/public_html.{{ deploy_build_id }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  become: yes
  become_user: root

- name: Make sure vendor directory exists inside the app web root
  file:
    path: "{{ codebase_dir }}/vendor"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  become: yes
  become_user: root

- name: Copy the updated codebase to the codebase dir inside the web root
  command: "/usr/bin/rsync --delay-updates -F --compress --archive {{ cached_copy_dir }}{{ deploy_codebase_root_folder }}/. {{ codebase_dir }}/public_html.{{ deploy_build_id }}/"
  when: not deploy_install_profile_enabled|default(False)|bool

- name: Copy the updated vendor to the codebase dir inside the web root
  command: "/usr/bin/rsync --delay-updates -F --compress --archive {{ cached_copy_dir }}/vendor/. {{ codebase_dir }}/public_html.{{ deploy_build_id }}/vendor/"
  when: not deploy_install_profile_enabled|default(False)|bool

- name: Find extra dict in composer.json
  set_fact:
    deploy_composer_extra__: "{{ (lookup('file', '/tmp/cached-copy/composer.json') | from_json )['extra'] | d({}) }}"
  when: deploy_composer_enabled|default(False)|bool and not deploy_install_profile_enabled|default(False)|bool

- name: Retrieve installer-paths dict in composer.json
  set_fact:
    deploy_composer_installer_paths__ : "{{ deploy_composer_extra__['installer-paths'] | d({}) }}"
  when: deploy_composer_enabled|default(False)|bool and not deploy_install_profile_enabled|default(False)|bool

- name: Rsync the installer-paths folders to the app web root
  command: "/usr/bin/rsync --delay-updates -F --compress --archive {{ cached_copy_dir }}/{{ item | regex_replace('{\\$name}$', '') }}/. {{ codebase_dir }}/public_html.{{ deploy_build_id }}/{{ item | regex_replace('{\\$name}$', '') }}/"
  with_items: "{{ deploy_composer_installer_paths__.keys() }}"
  when: not item|search('drush') and deploy_composer_enabled|default(False)|bool and not deploy_install_profile_enabled|default(False)|bool

- name: Make sure config sync directory exists (usually outside of the web root)
  file:
    path: "{{ deploy_config_sync_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  when: app_drupal_version|default('8')|version_compare('8', '==')
  become: yes
  become_user: root

- name: Check config sync directory exists in the cached copy of the repo
  stat:
    path: "{{ cached_copy_dir }}/{{ deploy_codebase_config_base_dir }}/sync"
  register: deploy_codebase_check_sync_output
  when: app_drupal_version|default('8')|version_compare('8', '==')
  become: yes
  become_user: root

- name: Copy the sync configuration folder to the web server dir but outside the webroot
  synchronize: 
    src: "{{ cached_copy_dir }}/{{ deploy_codebase_config_base_dir }}/sync/"
    dest: "{{ deploy_config_sync_dir }}"
    delete: yes
  when: app_drupal_version|default('8')|version_compare('8', '==') and deploy_codebase_check_sync_output.stat.exists
  delegate_to: "{{ inventory_hostname }}"

- name: Make sure config env directory exists (usually outside of the web root)
  file:
    path: "{{ deploy_config_env_dir }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
  when: app_drupal_version|default('8')|version_compare('8', '==')
  become: yes
  become_user: root

- name: Check config directory exists in the cached copy of the repo for the target environment
  stat:
    path: "{{ cached_copy_dir }}/{{ deploy_codebase_config_base_dir }}/{{ app_target }}"
  register: deploy_codebase_check_env_output
  when: app_drupal_version|default('8')|version_compare('8', '==')
  become: yes
  become_user: root

- name: Deploy the configuration for the target environment
  synchronize: 
    src: "{{ cached_copy_dir }}/{{ deploy_codebase_config_base_dir }}/{{ app_target }}/"
    dest: "{{ deploy_config_env_dir }}"
    delete: yes
  when: app_drupal_version|default('8')|version_compare('8', '==') and deploy_codebase_check_env_output.stat.exists
  delegate_to: "{{ inventory_hostname }}"
