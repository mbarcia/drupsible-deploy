---
# Location of the webserver sites
deploy_webroot: "{{ ansible_local.apache2.www }}"

# Modules to enable/disable/uninstall per app deployment
deploy_modules_present_app: []
deploy_modules_absent_app: []
# Modules to enable/disable/uninstall per app environment
deploy_modules_present_env: []
deploy_modules_absent_env: []

# String to identify the build based on today's date like 20201224_1824
deploy_build_id: "{{ ansible_date_time['year'] }}{{ ansible_date_time['month'] }}{{ ansible_date_time['day'] }}_{{ ansible_date_time['hour'] }}{{ ansible_date_time['minute'] }}"

# Host in the mysql group of the current environment
deploy_mysql_host: 'localhost'
# You can optionally set prefixes for some or all database table names
# by using the 'prefix' setting. If a prefix is specified, the table
# name will be prepended with its value. Be sure to use valid database
# characters only, usually alphanumeric and underscore. If no prefixes
# are desired, leave it as an empty string ''. You can also specify an
# array of prefixes for specific tables (see settings.php).
deploy_mysql_prefix: ""

# List of hostnames in the varnish group of the current environment
deploy_varnish_servers: [ "localhost" ]

# Name of the drupal module to control Varnish cache
deploy_varnish_drupal_module: 'varnish'

# Version of the repository to check out (full 40-character SHA-1 hash, the literal string HEAD, a branch name, or a tag name).
deploy_git_repo_version: master
# can be git, ssh, http or https
deploy_git_repo_protocol: "ssh"
deploy_git_repo_server: ""
deploy_git_repo_path: ""
deploy_git_repo_user: ""
deploy_accept_hostkey: no
# The root folder needs to be prefixed with a slash, like '/www'
deploy_codebase_root_folder: ''

deploy_reset_admin_pass: False
# Drupal admin password to set, when deploy_reset_admin_pass is True
deploy_drupal_admin_password: "drups1ble"

# Is this app spanning multiple internet domains?
deploy_multiple_domains: False

# Use an install profile?
deploy_install_profile_enabled: False
# Custom install profile name
deploy_custom_install_profile: ''
# Drupal.org install profile name (ie. commerce_kickstart or bear)
deploy_d_o_install_profile: ''

# Should Drupsible provision New Relic packages?
provision_new_relic: False

# Should Drupsible provision Drupal Console?
deploy_drupal_console_enabled: True

# Should Drupsible run drush make after grabbing the code?
deploy_drush_make_enabled: False
# Name of the makefile to feed drush make with
deploy_drush_makefile: "build-{{ app_name }}.make"

# Should Drupsible perform a backup of the current website before proceeding?
deploy_backup_cur_enabled: False
# Should Drupsible run drush site-install to build the DB from the profile?
deploy_site_install_enabled: False
# Should Drupsible clone the current DB into the build DB
deploy_db_clone_enabled: False
# Should Drupsible look for a DB dump in the controller, upload it and import
# it into the build DB?
deploy_db_import_enabled: False
# Name of the SQL dump file, can be .sql or .sql.gz
deploy_db_dump_filename: '{{ app_name }}.sql.gz'
# Should Drupsible run drush sql-sync with upstream/source DB?
deploy_db_sync_enabled: False
# Should Drupsible run drush updb, features-revert, registry-rebuild, etc.,
# once the DB has been filled with content? Disable if you are building a
# clone website.
deploy_rectify_db_enabled: True

# True looks for tarballs (files) to upload and import
deploy_files_import_enabled: False
# Name of the "files" archive
deploy_files_tarball_filename: '{{ app_name }}-files.tar.gz'
# Should Drupsible run drush rsync :%files% with the upstream/source website?
deploy_files_sync_enabled: False
# Should Drupsible copy the files from the current website into the build?
# Can be combined with deploy_files_sync_enabled=yes
deploy_files_copy_enabled: True

# Should Drupsible setup and configure rsyslog, and enable syslog module?
deploy_syslog_enabled: True

# Should Drupsible perform periodic backups with drush ard?
deploy_backup_enabled: False
# Frequency can be hourly, daily, weekly, monthly, yearly.
deploy_backup_frequency: daily
# Maximun number of backup archives to be kept at all times.
deploy_backup_qty: 7

#
# Drupal settings (7 and 8)
#
# Reverse proxy variables
# Ie., Drupal will lookup the real IP of the request in the deploy_reverse_proxy_header header.
# Make sure your CDN includes the right information in the right header.
deploy_reverse_proxy_header: 'X_FORWARDED_FOR'
# D8 only
deploy_reverse_proxy_proto_header: 'X_FORWARDED_PROTO'
deploy_reverse_proxy_host_header: 'X_FORWARDED_HOST'
deploy_reverse_proxy_port_header: 'X_FORWARDED_PORT'
deploy_reverse_proxy_forwarded_header: 'FORWARDED'

# HTTP Client Proxy settings
deploy_http_client_proxy_enabled: no
deploy_http_client_proxy: 'http://proxy_user:proxy_pass@example.com:8080'
deploy_http_client_proxy_s: 'http://proxy_user:proxy_pass@example.com:8080'
deploy_http_client_proxy_exceptions:
  - '127.0.0.1'
  - 'localhost'

# Proxy settings (D7)
deploy_proxy_server: ''
deploy_proxy_port: 8080
deploy_proxy_username: ''
deploy_proxy_password: ''
deploy_proxy_user_agent: ''

# The Xdebug extension should not be enabled by default anywhere
deploy_xdebug_enabled: no

# Drupal 8 settings
# Container base class
deploy_container_base_class: '\Drupal\Core\DependencyInjection\Container'
# Config base dir in the repository (no slashes at the beginning or end)
deploy_codebase_config_base_dir: "config"
# Config dir for the sync label
deploy_config_sync_dir: "{{ deploy_webroot }}/{{ app_name }}/{{ deploy_codebase_config_base_dir }}/sync"
# Config dir for the target environment label
deploy_config_env_dir: "{{ deploy_webroot }}/{{ app_name }}/{{ deploy_codebase_config_base_dir }}/{{ app_target }}"
# Identifier
deploy_identifier: "{{ deploy_build_id }}"

# Update translations?
deploy_update_translations_enabled: True

# Purge module (D8) defaults
deploy_purge_http_purger_instance_id: db413bd5ce
deploy_purge_plugins_purgers_config:
  order_index: 1
  instance_id: "{{ deploy_purge_http_purger_instance_id }}"
  plugin_id: http

# HTTP purger (D8) default
# This needs /etc/hosts (of the web server) to resolve the hostname to the Varnish server IP
purge_purger_http_settings:
  uuid: a499996a-f2a5-4ca1-bd8e-1e17925947ae
  status: true
  id: "{{ deploy_purge_http_purger_instance_id }}"
  name: 'Drupsible-Varnish-HTTP-purger'
  invalidationtype: tag
  hostname: "{{ groups[ app_name + '-' + app_target + '_' + 'varnish'][0] }}"
  port: 80
  path: /
  request_method: PURGE

# Drupal page cache max-age value in seconds (default 10 min)
deploy_page_cache_max_age: '600'

# Default IP address and port where memcached is listening
deploy_memcached_listen_ip_address: '127.0.0.1'
deploy_memcached_port: '11211'

# Fast 404 pages (D7)
deploy_404_fast_enabled_d7: yes
deploy_404_fast_paths_exclude_d7: '/\/(?:styles|advagg_(cs|j)s)\//'
deploy_404_fast_paths_d7: '/\.(?:txt|png|gif|jpe?g|css|js|ico|swf|flv|cgi|bat|pl|dll|exe|asp)$/i'
deploy_404_fast_html_d7: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>'
deploy_faster_404_enabled_d7: yes

# Fast 404 pages
deploy_fast_404_enabled: yes
deploy_fast_404_exclude_paths: '/\/(?:styles|advagg_(cs|j)s|system\/files)\//'
deploy_fast_404_paths: '/\.(?:txt|png|gif|jpe?g|css|js|ico|swf|flv|cgi|bat|pl|dll|exe|asp)$/i'
deploy_fast_404_html: '<!DOCTYPE html><html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL "@path" was not found on this server.</p></body></html>'

# Enable if your profile supports it
deploy_drush_make_shallow_clone_enabled: False

# Disable this if you don't want Drupsible to create a hotfix branch and tag upon 
# successful deployment to prod
deploy_push_hotfix_branch_tag: yes

deploy_php_service_name: "php{{ ansible_local.php.version|default(deploy_php_version_default) }}-fpm"
